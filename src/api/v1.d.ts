/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users": {
    /** @description Returns all users from the server */
    post: operations["findUsers"];
  };
  "/login": {
    /** @description Login or sign up */
    post: operations["loginOrSignup"];
  };
  "/followers": {
    /** @description Find all followers */
    post: operations["findFollowers"];
    /** @description deletes a single follower based on the userId and followerId supplied */
    delete: operations["deleteFollower"];
  };
  "/followers/requests": {
    /** @description Find all followers */
    post: operations["findFollowerRequests"];
  };
  "/following": {
    /** @description Find all following */
    post: operations["findFollowing"];
    /** @description deletes a single follower based on the userId and followerId supplied */
    delete: operations["deleteFollowing"];
  };
  "/following/locations": {
    /** @description Find the locations of all followed users */
    post: operations["updateLocationsOfFollowedUsers"];
  };
  "/follow/request": {
    /** @description Follow a new user */
    post: operations["createFollowRequest"];
  };
  "/follow/response": {
    /** @description Accept or reject a follow request */
    post: operations["updateFollowRequest"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserRequest: {
      queryString: string;
    };
    UserResponse: {
      userId: string;
      fullName: string;
    };
    /** @description The location of a user with a timestamp given in epoch millis */
    UserLocation: {
      userId: string;
      latitude: number;
      longitude: number;
      /** Format: int64 */
      timestamp: number;
    };
    LoginRequest: {
      userId: string;
      fullName?: string;
      email?: string;
    };
    FindFriendsRequest: {
      userId: string;
    };
    FindFriendsResponse: components["schemas"]["UserResponse"][];
    DeleteFollowerRequest: {
      userId: string;
      followerUserId: string;
    };
    DeleteFollowingRequest: {
      userId: string;
      followingUserId: string;
    };
    UpdateFollowedUserLocationsRequest: {
      userId: string;
    };
    UpdateFollowedUserLocationsResponse: components["schemas"]["UserLocation"][];
    FollowRequestRequest: {
      userId: string;
      followingUserId: string;
    };
    FollowResponseRequest: {
      userId: string;
      requestedFollowerUserId: string;
      accept: boolean;
    };
    Error: {
      /** Format: int32 */
      code: number;
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Returns all users from the server */
  findUsers: {
    /** @description User prefix to seerch */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description User Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"][];
        };
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Login or sign up */
  loginOrSignup: {
    /** @description User to add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login Success */
      200: {
        content: never;
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Find all followers */
  findFollowers: {
    /** @description User to find the followers of */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindFriendsRequest"];
      };
    };
    responses: {
      /** @description Find Followers Response */
      200: {
        content: {
          "application/json": components["schemas"]["FindFriendsResponse"];
        };
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description deletes a single follower based on the userId and followerId supplied */
  deleteFollower: {
    /** @description Follower/User pair to delete */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteFollowerRequest"];
      };
    };
    responses: {
      /** @description follower deleted */
      204: {
        content: never;
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Find all followers */
  findFollowerRequests: {
    /** @description User to find the follower requests of */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindFriendsRequest"];
      };
    };
    responses: {
      /** @description Find Follow Request Response */
      200: {
        content: {
          "application/json": components["schemas"]["FindFriendsResponse"];
        };
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Find all following */
  findFollowing: {
    /** @description User to find the following of */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindFriendsRequest"];
      };
    };
    responses: {
      /** @description Find Following Response */
      200: {
        content: {
          "application/json": components["schemas"]["FindFriendsResponse"];
        };
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description deletes a single follower based on the userId and followerId supplied */
  deleteFollowing: {
    /** @description Following/User pair to delete */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteFollowingRequest"];
      };
    };
    responses: {
      /** @description follower deleted */
      204: {
        content: never;
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Find the locations of all followed users */
  updateLocationsOfFollowedUsers: {
    /** @description User for whom we will find the location of their followign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFollowedUserLocationsRequest"];
      };
    };
    responses: {
      /** @description Find Following Response */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateFollowedUserLocationsResponse"];
        };
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Follow a new user */
  createFollowRequest: {
    /** @description User to follow */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FollowRequestRequest"];
      };
    };
    responses: {
      /** @description Follow Request Response */
      200: {
        content: never;
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
  /** @description Accept or reject a follow request */
  updateFollowRequest: {
    /** @description Accepted or denied follow request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FollowResponseRequest"];
      };
    };
    responses: {
      /** @description Follow Response Response */
      200: {
        content: never;
      };
      /** @description unexpected error */
      default: {
        content: never;
      };
    };
  };
}
